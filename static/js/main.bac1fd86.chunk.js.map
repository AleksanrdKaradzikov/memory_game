{"version":3,"sources":["components/Container.js","components/Card.js","constants/appConstants.js","components/Styled.js","components/WelcomeModal.js","helpers/dataFormatHelpers.js","components/GameOver.js","components/Stopwatch.js","redux/actions.js","components/PlayingField.js","containers/GuessCards.js","App.js","constants/dataConstants.js","redux/reduser.js","index.js"],"names":["ContainerComponent","styled","div","Container","children","ContentCardFront","ContentCardBack","CardComponent","button","isHidden","isShow","Card","id","value","onClick","disabled","ModalView","Title","h3","Description","p","WelcomeModalView","shuffle","array","newArray","i","length","j","Math","floor","random","dataFormatToPlayingFields","data","reduce","acc","item1","item2","props","_","index","items","slice","gameTimeFormat","minutes","seconds","hours","String","padStart","GameOver","connect","state","gameTime","attemptsHistory","StopwatchComponent","StopwatchValue","StopwatchView","onChange","render","formatted","Stopwatch","React","memo","SHOW_CARD_ACTION_TYPE","SET_CURRENT_CARD_ACTION_TYPE","CLEAR_CURRENT_CARD_ACTION_TYPE","HIDE_CARD_ACTION_TYPE","VISIBLE_HIDDENN_CARD_ACTION_TYPE","CLEAR_STATE_ACTION_TYPE","SET_GAME_TIME_ACTION_TYPE","ADD_ATTEMP_ACTION_TYPE","Wrap","Row","FieldWrap","actionCreators","showCardAction","payload","type","hideCardAction","setCurrentCardAction","clearCurrentCardAction","visibileHiddenCardAction","clearStateAction","setGameTimeAction","addHistoryAttempAction","PlayingField","playingFields","currentSelectCard","showCards","useState","isGameRunning","setGameRunning","isGameOver","setGameOver","timerId","useRef","handleChangeGameTime","useCallback","time","handelClickCard","item","clearTimeout","current","setTimeout","CARD_ROTATE_ANIMATION_TIME","useEffect","every","row","map","GuessCards","App","PLAYING_FIELD_DATA","initialPlayingFieldsState","initiaGameTimeState","rootReducer","combineReducers","action","store","createStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.bac1fd86.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components/macro';\n\nconst ContainerComponent = styled.div`\n    width: 100%;\n    max-width: 1200px;\n    margin: 0 auto;\n    padding-top: 100px;\n    padding-bottom: 100px;\n`;\n\nexport const Container = ({ children }) => {\n    return (\n        <ContainerComponent>\n            {children}\n        </ContainerComponent>\n    );\n};","import React from 'react';\nimport styled from 'styled-components/macro';\n\nimport { CARD_ROTATE_ANIMATION_TIME } from '../constants/appConstants';\n\nconst ContentCardFront = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    left: 0;\n    top: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    transition: 1s;\n    backface-visibility: hidden;\n    border-radius: 10px;\n    background-color: white;\n    display: flex;\n    justify-content: center;\n    transition transform ${CARD_ROTATE_ANIMATION_TIME}s ease, box-shadow .3s ease;\n    align-items: center;\n    border-radius: 10px;\n`;\n\nconst ContentCardBack = styled(ContentCardFront)`\n    background-color: skyblue;\n    transform: rotateY(180deg);\n    font-size: 30px;\n    font-weight: 600;\n    color: white;\n`;\n\nconst CardComponent = styled.button`\n    width: 140px;\n    height: 140px;\n    margin-right: 10px;\n    cursor: ${({ isHidden }) => isHidden ? 'default' : 'pointer'};;\n    perspective: 1000px;\n    opacity: ${({ isHidden }) => isHidden ? '0.3' : '1'};\n    border: none;\n    padding: 0;\n    transion: opacity 1s ease;\n    background-color: transparent;\n\n    &:last-child {\n        margin: 0;\n    }\n\n    &:hover {\n        ${ContentCardFront} {\n            box-shadow: 4px 4px 28px 11px rgba(34, 60, 80, 0.2);\n        }\n\n        ${ContentCardBack} {\n            box-shadow: 4px 4px 28px 11px rgba(34, 60, 80, 0.2);\n        }\n    }\n\n    ${({ isShow }) => {\n        return isShow ? `\n            ${ContentCardFront} {\n                transform: rotateY(180deg);\n            }\n\n            ${ContentCardBack} {\n                transform: rotateY(360deg);\n            }\n        ` : ``;\n    }}\n`;\n\nexport const Card = ({ id, value, isHidden, isShow, onClick }) => {\n    const handleClick = () => {\n        if (isShow) {\n            return;\n        }\n\n        onClick({\n            id,\n            value,\n            isHidden,\n            isShow,\n        })\n    };\n\n    return (\n        <CardComponent \n            isHidden={isHidden} \n            isShow={isShow} \n            onClick={handleClick} \n            disabled={isHidden}\n        >\n            <ContentCardFront />\n            <ContentCardBack>\n                {value}\n            </ContentCardBack>\n        </CardComponent>\n    );\n}","export const NUMBER_COLUMNS_IN_ROW = 6;\nexport const CARD_ROTATE_ANIMATION_TIME = 1;\nexport const RESPONSE_TIME = 5000;","import styled from 'styled-components/macro';\n\nexport const ModalView = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    left: 0;\n    background-color: rgba(255, 110, 0, 0.6);\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    z-index: 10;\n    cursor: pointer;\n    border-radius: 8px;\n`;\n\nexport const Title = styled.h3`\n    color: white;\n    font-size: 60px;\n    font-weight: 600;\n    margin: 0;\n`;\n\nexport const Description = styled.p`\n    font-size: 40px;\n    color: white;\n    font-weight: 600;\n`;","import React from 'react';\nimport styled from 'styled-components/macro';\n\nimport { ModalView, Title } from './Styled';\n\nconst Description = styled.p`\n    font-size: 40px;\n    color: white;\n    font-weight: 600;\n`;\n\nexport const WelcomeModalView = ({ onClick }) => {\n    return (\n        <ModalView onClick={onClick}>\n            <Title>\n                Игра \"Память\"\n            </Title>\n            <Description>\n                Нажмите чтобы начать игру\n            </Description>\n        </ModalView>\n    );\n};","import { NUMBER_COLUMNS_IN_ROW } from '../constants/appConstants';\n\nexport const shuffle = (array) => {\n    const newArray = [...array];\n    for (let i = newArray.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n        [newArray[i], newArray[j]] = [newArray[j], newArray[i]];\n    }\n\n    return newArray;\n}\n\nexport const dataFormatToPlayingFields = (data = []) => {\n    let id = 0;\n\n    return shuffle(data.reduce((acc, [item1, item2]) => {\n        const props = {\n            isShow: false,\n            isHidden: false,\n        };\n\n        return [\n            ...acc,\n            {\n                ...item1,\n                ...props,\n                id: ++id,\n            },\n            {\n                ...item2,\n                ...props,\n                id: ++id,\n            },\n        ]\n    }, [])).reduce((acc, _, index, items) => {\n        const isRow = index % NUMBER_COLUMNS_IN_ROW === 0;\n\n        return isRow ? [\n            ...acc,\n            items.slice(index, index + NUMBER_COLUMNS_IN_ROW),\n        ] : acc;\n    }, []);\n};\n\nexport const gameTimeFormat = ({ minutes, seconds, hours }) => {\n    return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components/macro';\n\nimport { ModalView, Title, Description } from './Styled';\nimport { gameTimeFormat } from '../helpers/dataFormatHelpers';\n\nexport const GameOverView = ({ onClick, gameTime, attemptsHistory }) => {\n    return (\n        <ModalView onClick={onClick}>\n            <Title>\n                 Игра окончена\n            </Title>\n            <Description>\n                Время игры составило: {gameTimeFormat(gameTime)}\n            </Description>\n            <Description>\n                Количество попыток: {attemptsHistory.length}\n            </Description>\n        </ModalView>\n    );\n};\n\nconst mapStateToProps = state => ({\n    gameTime: state.gameTime,\n    attemptsHistory: state.attemptsHistory,\n});\n\nexport const GameOver = connect(mapStateToProps)(GameOverView);","import React from 'react';\nimport ReactStopwatch from 'react-stopwatch';\nimport styled from 'styled-components/macro';\n\nconst StopwatchComponent = styled.div`\n    position: fixed;\n    top: 20px;\n    left: 20px;\n    padding: 10px;\n    background-color: white;\n    border-radius: 10px;\n`;\n\nconst StopwatchValue = styled.p`\n    font-size: 20px;\n    font-weight: 600;\n`;\n\nconst StopwatchView = ({ onChange }) => (\n    <ReactStopwatch\n        seconds={0}\n        minutes={0}\n        hours={0}\n        onChange={onChange}\n        render={({ formatted }) => {\n            return (\n                <StopwatchComponent>\n                    <StopwatchValue>\n                        { formatted }\n                    </StopwatchValue>\n                </StopwatchComponent>\n            );\n        }}\n    />\n);\n\nexport const Stopwatch = React.memo(StopwatchView);","export const SHOW_CARD_ACTION_TYPE = 'SHOW_CARD_ACTION_TYPE';\nexport const SET_CURRENT_CARD_ACTION_TYPE = 'SET_CURRENT_CARD_ACTION_TYPE';\nexport const CLEAR_CURRENT_CARD_ACTION_TYPE = 'CLEAR_CURRENT_CARD_ACTION_TYPE';\nexport const HIDE_CARD_ACTION_TYPE = 'HIDE_CARD_ACTION_TYPE';\nexport const VISIBLE_HIDDENN_CARD_ACTION_TYPE = 'VISIBLE_HIDDENN_CARD_ACTION_TYPE';\nexport const CLEAR_STATE_ACTION_TYPE = 'CLEAR_STATE_ACTION_TYPE';\nexport const SET_GAME_TIME_ACTION_TYPE = 'SET_GAME_TIME_ACTION_TYPE';\nexport const ADD_ATTEMP_ACTION_TYPE = 'ADD_ATTEMP_ACTION_TYPE';\n\nexport const showCardAction = (payload) => ({\n    type: SHOW_CARD_ACTION_TYPE,\n    payload,\n});\n\nexport const setCurrentCadrAction = (payload) => ({\n    type: SET_CURRENT_CARD_ACTION_TYPE,\n    payload,\n});\n\nexport const clearCurrentCardAction = () => ({\n    type: CLEAR_CURRENT_CARD_ACTION_TYPE,\n});\n\nexport const hideCardAction = () => ({\n    type: HIDE_CARD_ACTION_TYPE,\n});\n\nexport const visibileHiddenCardAction = (payload) => ({\n    type: VISIBLE_HIDDENN_CARD_ACTION_TYPE,\n    payload,\n});\n\nexport const clearStateAction = () => ({\n    type: CLEAR_STATE_ACTION_TYPE,\n});\n\nexport const setGameTimeAction = (payload) => ({\n    type: SET_GAME_TIME_ACTION_TYPE,\n    payload,\n});\n\nexport const addHistoryAttempAction = (payload) => ({\n    type: ADD_ATTEMP_ACTION_TYPE,\n    payload,\n});\n","import React, { useRef, useState, useEffect, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components/macro';\n\nimport { Card } from './Card';\nimport { WelcomeModalView } from '../components/WelcomeModal';\nimport { GameOver } from './GameOver';\nimport { Stopwatch } from './Stopwatch';\nimport { CARD_ROTATE_ANIMATION_TIME, RESPONSE_TIME } from '../constants/appConstants';\nimport * as actions from '../redux/actions';\n\nconst Wrap = styled.div`\n    display: flex;\n    justify-content: center;\n    aling-items: center;\n    border-radius: 8px;\n`;\n\nconst Row = styled.div`\n    display: flex;\n    margin-bottom: 10px;\n\n    &:last-child {\n        margin: 0;\n    }\n`;\n\nconst FieldWrap = styled.div`\n    position: relative;\n    padding: 5px;\n`;\n\nexport const PlayingFieldView = ({ \n    playingFields, \n    showCardAction, \n    setCurrentCardAction, \n    currentSelectCard,\n    clearCurrentCardAction, \n    hideCardAction,\n    showCards,\n    visibileHiddenCardAction,\n    clearStateAction,\n    setGameTimeAction,\n    addHistoryAttempAction,\n}) => {\n    const [isGameRunning, setGameRunning] = useState(false);\n    const [isGameOver, setGameOver] = useState(false);\n\n    const timerId = useRef(null);\n\n    const handlePlayStartClick = () => setGameRunning(true);\n\n    const handleGameOverClick = () => {\n        setGameOver(false);\n        setGameRunning(false);\n        clearStateAction();\n    }\n\n    const handleChangeGameTime = useCallback((time) => {\n        setGameTimeAction(time);\n    }, [setGameTimeAction]);\n\n    const handelClickCard = (item) => {\n        if (showCards.length === 2 || !isGameRunning) {\n            return;\n        }\n\n        showCardAction(item);\n\n        if (!currentSelectCard) {\n            setCurrentCardAction(item);\n\n            clearTimeout(timerId.current);\n\n            timerId.current = setTimeout(() => {\n                clearCurrentCardAction();\n                hideCardAction();\n            }, RESPONSE_TIME);\n        }\n\n        setTimeout(() => {\n\n            if (currentSelectCard) {\n                addHistoryAttempAction([currentSelectCard, item]);\n            }\n\n            if (currentSelectCard && currentSelectCard.value === item.value) {\n                visibileHiddenCardAction(item);\n                clearCurrentCardAction();\n\n                clearTimeout(timerId.current);\n            }\n\n            if (currentSelectCard && currentSelectCard.value !== item.value) {\n                clearCurrentCardAction();\n                hideCardAction();\n\n                clearTimeout(timerId.current);\n            }\n        \n        }, CARD_ROTATE_ANIMATION_TIME * 1000);\n    }\n\n    useEffect(() => {\n        const isGameOver = playingFields.every((row) => {\n            return row.every((item) => item.isHidden);\n        });\n\n        if (isGameOver) {\n            setGameOver(true);\n        }\n    }, [playingFields]);\n\n    return (\n        <Wrap>\n            {isGameRunning && !isGameOver && <Stopwatch onChange={handleChangeGameTime} />}\n            <FieldWrap>\n                {!isGameRunning && <WelcomeModalView onClick={handlePlayStartClick} />}\n                {isGameOver && <GameOver onClick={handleGameOverClick}/>}\n                {playingFields.map((row, index) => {\n                    return (\n                        <Row key={index}>\n                            {row.map(({ id, value, isShow, isHidden }, index) => {\n                                return (\n                                    <Card \n                                        id={id}\n                                        key={index} \n                                        value={value} \n                                        onClick={handelClickCard}\n                                        isShow={isShow}\n                                        isHidden={isHidden}\n                                    />\n                                );\n                            })}\n                        </Row>\n                    );\n                })}\n            </FieldWrap>\n        </Wrap>\n    );\n}\n\nconst mapStateToProps = state => ({\n    playingFields: state.playingFields,\n    currentSelectCard: state.currentSelectCard,\n    showCards: state.showCards,\n});\n\nconst actionCreators = {\n    showCardAction: actions.showCardAction,\n    hideCardAction: actions.hideCardAction,\n    setCurrentCardAction: actions.setCurrentCadrAction,\n    clearCurrentCardAction: actions.clearCurrentCardAction,\n    visibileHiddenCardAction: actions.visibileHiddenCardAction,\n    clearStateAction: actions.clearStateAction,\n    setGameTimeAction: actions.setGameTimeAction,\n    addHistoryAttempAction: actions.addHistoryAttempAction,\n};\n\nexport const PlayingField = connect(mapStateToProps, actionCreators)(PlayingFieldView);","import React from 'react';\nimport { Container } from '../components/Container';\nimport { PlayingField } from '../components/PlayingField';\n\nexport const GuessCards = () => {\n    return (\n        <Container>\n            <PlayingField />\n        </Container>\n    )\n}","import React from 'react';\nimport { GuessCards } from './containers/GuessCards';\n\nfunction App() {\n  return (\n      <GuessCards />\n  );\n}\n\nexport default App;\n","export const PLAYING_FIELD_DATA = [\n    [{  value: 1}, { value: 1 }],\n    [{  value: 2}, { value: 2 }],\n    [{  value: 3}, { value: 3 }],\n    [{  value: 4}, { value: 4 }],\n    [{  value: 5}, { value: 5 }],\n    [{  value: 6}, { value: 6 }],\n    [{  value: 7}, { value: 7 }],\n    [{  value: 8}, { value: 8 }],\n    [{  value: 9}, { value: 9 }],\n    [{  value: 10}, { value: 10 }],\n    [{  value: 11}, { value: 11 }],\n    [{  value: 12}, { value: 12 }],\n    [{  value: 13}, { value: 13 }],\n    [{  value: 14}, { value: 14 }],\n    [{  value: 15}, { value: 15 }],\n    [{  value: 16}, { value: 16 }],\n    [{  value: 17}, { value: 17 }],\n    [{  value: 18}, { value: 18 }],\n];","import { combineReducers } from 'redux';\n\nimport { dataFormatToPlayingFields } from '../helpers/dataFormatHelpers';\nimport { PLAYING_FIELD_DATA } from '../constants/dataConstants';\nimport { \n    SHOW_CARD_ACTION_TYPE,\n    SET_CURRENT_CARD_ACTION_TYPE,\n    CLEAR_CURRENT_CARD_ACTION_TYPE,\n    HIDE_CARD_ACTION_TYPE,\n    VISIBLE_HIDDENN_CARD_ACTION_TYPE,\n    CLEAR_STATE_ACTION_TYPE,\n    SET_GAME_TIME_ACTION_TYPE,\n    ADD_ATTEMP_ACTION_TYPE,\n} from './actions';\n\nconst initialPlayingFieldsState = dataFormatToPlayingFields(PLAYING_FIELD_DATA);\nconst initiaGameTimeState = { hours: 0, minutes: 0, seconds: 0 };\n\nconst playingFieldsReducer = (state = initialPlayingFieldsState, action) => {\n    switch(action.type) {\n        case SHOW_CARD_ACTION_TYPE: {\n            const { payload } = action;\n\n            return state.map((row) => {\n                return row.map((item) => {\n                    if (item.id === payload.id && !item.isShow) {\n                        return {\n                            ...item,\n                            isShow: true,\n                        }\n                    }\n                    return item;\n                });\n            });\n        }\n\n        case HIDE_CARD_ACTION_TYPE: {\n            return state.map((row) => {\n                return row.map((item) => {\n                    if (item.isHidden) {\n                        return item;\n                    }\n\n                    return {\n                        ...item,\n                        isShow: false,\n                    }\n                })\n            })\n        }\n\n        case VISIBLE_HIDDENN_CARD_ACTION_TYPE: {\n            const { payload } = action;\n\n            return state.map((row) => {\n                return row.map((item) => {\n                    if (item.value === payload.value) {\n                        return {\n                            ...item,\n                            isHidden: true,\n                        }\n                    }\n                    return item;\n                })\n            });\n        }\n\n        case CLEAR_STATE_ACTION_TYPE: {\n            return dataFormatToPlayingFields(PLAYING_FIELD_DATA);\n        }\n\n        default: \n            return state;\n    }\n};\n\nconst currentSelectCardReduser = (state = null, action) => {\n    switch(action.type) {\n        case SET_CURRENT_CARD_ACTION_TYPE: {\n            return action.payload;\n        }\n        case CLEAR_CURRENT_CARD_ACTION_TYPE: {\n            return null;\n        }\n\n        case CLEAR_STATE_ACTION_TYPE: {\n            return null;\n        }\n\n        default:\n            return state;\n    }\n}\n\nconst showCardsReduser = (state = [], action) => {\n    switch(action.type) {\n        case SHOW_CARD_ACTION_TYPE: {\n            return [\n                ...state,\n                action.payload,\n            ]\n        }\n\n        case HIDE_CARD_ACTION_TYPE: {\n            return [];\n        }\n\n        case VISIBLE_HIDDENN_CARD_ACTION_TYPE: {\n            return [];\n        }\n\n        case CLEAR_STATE_ACTION_TYPE: {\n            return [];\n        }\n\n        default:\n            return state;\n    }\n}\n\nconst gameTimeReduser = (state = initiaGameTimeState, action) => {\n    switch(action.type) {\n        case CLEAR_STATE_ACTION_TYPE: {\n            return initiaGameTimeState;\n        }\n\n        case SET_GAME_TIME_ACTION_TYPE: {\n            const { payload } = action;\n            return payload;\n        };\n\n        default: \n            return state;\n    }\n}\n\nconst attemptsHistoryReduser = (state = [], action) => {\n    switch(action.type) {\n        case ADD_ATTEMP_ACTION_TYPE: {\n            const { payload } = action;\n\n            return [\n                ...state,\n                payload,\n            ];\n        }\n\n        case CLEAR_STATE_ACTION_TYPE: {\n            return [];\n        }\n\n        default:\n            return state;\n    }\n};\n\nexport const rootReducer = combineReducers({\n    playingFields: playingFieldsReducer,\n    currentSelectCard: currentSelectCardReduser,\n    showCards: showCardsReduser,\n    gameTime: gameTimeReduser,\n    attemptsHistory: attemptsHistoryReduser,\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider }from 'react-redux';\nimport App from './App';\nimport './global.css';\n\nimport { rootReducer } from './redux/reduser';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}